// Code generated by protoc-gen-go.
// source: metron.proto
// DO NOT EDIT!

package loggregator

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MetronResponse struct {
}

func (m *MetronResponse) Reset()                    { *m = MetronResponse{} }
func (m *MetronResponse) String() string            { return proto.CompactTextString(m) }
func (*MetronResponse) ProtoMessage()               {}
func (*MetronResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func init() {
	proto.RegisterType((*MetronResponse)(nil), "loggregator.MetronResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MetronIngress service

type MetronIngressClient interface {
	Sender(ctx context.Context, opts ...grpc.CallOption) (MetronIngress_SenderClient, error)
}

type metronIngressClient struct {
	cc *grpc.ClientConn
}

func NewMetronIngressClient(cc *grpc.ClientConn) MetronIngressClient {
	return &metronIngressClient{cc}
}

func (c *metronIngressClient) Sender(ctx context.Context, opts ...grpc.CallOption) (MetronIngress_SenderClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MetronIngress_serviceDesc.Streams[0], c.cc, "/loggregator.MetronIngress/Sender", opts...)
	if err != nil {
		return nil, err
	}
	x := &metronIngressSenderClient{stream}
	return x, nil
}

type MetronIngress_SenderClient interface {
	Send(*Envelope) error
	CloseAndRecv() (*MetronResponse, error)
	grpc.ClientStream
}

type metronIngressSenderClient struct {
	grpc.ClientStream
}

func (x *metronIngressSenderClient) Send(m *Envelope) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metronIngressSenderClient) CloseAndRecv() (*MetronResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MetronResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MetronIngress service

type MetronIngressServer interface {
	Sender(MetronIngress_SenderServer) error
}

func RegisterMetronIngressServer(s *grpc.Server, srv MetronIngressServer) {
	s.RegisterService(&_MetronIngress_serviceDesc, srv)
}

func _MetronIngress_Sender_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetronIngressServer).Sender(&metronIngressSenderServer{stream})
}

type MetronIngress_SenderServer interface {
	SendAndClose(*MetronResponse) error
	Recv() (*Envelope, error)
	grpc.ServerStream
}

type metronIngressSenderServer struct {
	grpc.ServerStream
}

func (x *metronIngressSenderServer) SendAndClose(m *MetronResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metronIngressSenderServer) Recv() (*Envelope, error) {
	m := new(Envelope)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MetronIngress_serviceDesc = grpc.ServiceDesc{
	ServiceName: "loggregator.MetronIngress",
	HandlerType: (*MetronIngressServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sender",
			Handler:       _MetronIngress_Sender_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "metron.proto",
}

func init() { proto.RegisterFile("metron.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 126 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xc9, 0x4d, 0x2d, 0x29,
	0xca, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xce, 0xc9, 0x4f, 0x4f, 0x2f, 0x4a,
	0x4d, 0x4f, 0x2c, 0xc9, 0x2f, 0x92, 0xe2, 0x4b, 0xcd, 0x2b, 0x4b, 0xcd, 0xc9, 0x2f, 0x48, 0x85,
	0x48, 0x2a, 0x09, 0x70, 0xf1, 0xf9, 0x82, 0x15, 0x07, 0xa5, 0x16, 0x17, 0xe4, 0xe7, 0x15, 0xa7,
	0x1a, 0x05, 0x72, 0xf1, 0x42, 0x44, 0x3c, 0xf3, 0xd2, 0x8b, 0x52, 0x8b, 0x8b, 0x85, 0x1c, 0xb8,
	0xd8, 0x82, 0x53, 0xf3, 0x52, 0x52, 0x8b, 0x84, 0x44, 0xf5, 0x90, 0x8c, 0xd2, 0x73, 0x85, 0x9a,
	0x24, 0x25, 0x8d, 0x22, 0x8c, 0x6a, 0x9c, 0x12, 0x83, 0x06, 0x63, 0x12, 0x1b, 0xd8, 0x2e, 0x63,
	0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x83, 0xf9, 0x0b, 0xc1, 0x98, 0x00, 0x00, 0x00,
}
